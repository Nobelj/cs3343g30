/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder
 */
package cs3343g30;

import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.scene.chart.*;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.util.StringConverter;


import java.util.Calendar;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;


/**
 * The controller for the UI
 */
public class Controller {

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;

    @FXML
    private Tab tabReport1;

    @FXML
    private ToggleGroup T1;

    @FXML
    private Tab tabReport2;

    @FXML
    private ToggleGroup T11;

    @FXML
    private Tab tabReport3;

    @FXML
    private ToggleGroup T111;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;



    /**
     * Task Zero
     * To be triggered by the "Summary" button on the Task Zero Tab
     */
    @FXML
    public void doSummary() {
        int year = Integer.parseInt(textfieldYear.getText());
        String oReport = AnalyzeNames.getSummary(year);
        textAreaConsole.setText(oReport);
        enlargeConsole();
    }


    /**
     * Task Zero
     * To be triggered by the "Rank (female)" button on the Task Zero Tab
     */
    @FXML
    public void doRankF() {
        String oReport = "";
        String iNameF = textfieldNameF.getText();
        int iYear = Integer.parseInt(textfieldYear.getText());
        int oRank = AnalyzeNames.getRank(iYear, iNameF, "F");
        if (oRank == -1)
            oReport = String.format("The name %s (female) has not been ranked in the year %d.\n", iNameF, iYear);
        else
            oReport = String.format("Rank of %s (female) in year %d is #%d.\n", iNameF, iYear, oRank);
        textAreaConsole.setText(oReport);
    }


    /**
     * Task Zero
     * To be triggered by the "Rank (male)" button on the Task Zero Tab
     */
    @FXML
    public void doRankM() {
        String oReport = "";
        String iNameM = textfieldNameM.getText();
        int iYear = Integer.parseInt(textfieldYear.getText());
        int oRank = AnalyzeNames.getRank(iYear, iNameM, "M");
        if (oRank == -1)
            oReport = String.format("The name %s (male) has not been ranked in the year %d.\n", iNameM, iYear);
        else
            oReport = String.format("Rank of %s (male) in year %d is #%d.\n", iNameM, iYear, oRank);
        textAreaConsole.setText(oReport);
    }


    /**
     * Task Zero
     * To be triggered by the "Top 5 (female)" button on the Task Zero Tab
     */
    @FXML
    public void doTopF() {
        String oReport = "";
        final int topN = 5;
        int iYear = Integer.parseInt(textfieldYear.getText());
        oReport = String.format("Top %d most popular names (female) in the year %d:\n", topN, iYear);
        for (int i = 1; i <= topN; i++)
            oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "F"));
        textAreaConsole.setText(oReport);
        enlargeConsole();
    }


    /**
     * Task Zero
     * To be triggered by the "Top 5 (male)" button on the Task Zero Tab
     */
    @FXML
    public void doTopM() {
        String oReport = "";
        final int topN = 5;
        int iYear = Integer.parseInt(textfieldYear.getText());
        oReport = String.format("Top %d most popular names (male) in the year %d:\n", topN, iYear);
        for (int i = 1; i <= topN; i++)
            oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "M"));
        textAreaConsole.setText(oReport);
        enlargeConsole();
    }
    
    /**
     * To do initialization when the program is run
     */
    @FXML
    public void initialize() {
    	t1ErrorMsgForYear.setTextFill(Color.web("#FF0000"));
    	t1ErrorMsgForN.setTextFill(Color.web("#FF0000"));
    	t1ErrorMsgForYear.setVisible(false);
    	t1ErrorMsgForN.setVisible(false);
    	
    	t4ErrorMsgForDadName.setTextFill(Color.web("red"));
    	t4ErrorMsgForMumName.setTextFill(Color.web("red"));
    	t4Algo1ExplainLabel.setTextFill(Color.web("green"));
    	t4Algo2ExplainLabel.setTextFill(Color.web("green"));
    	t4AlgoChoice.getItems().addAll("T4X1", "T4X2");
    	t4ErrorMsgForAlgoChoice.setTextFill(Color.web("red"));
    	t4ErrorMsgForAlgoChoice.setVisible(false);
    	t4RecomBoyLabel.setFont(new Font(15));
    	t4RecomGirlLabel.setFont(new Font(15));
    	t4FunFactLabel.setFont(new Font(15));
    	t4FunFact.setFont(new Font(15));
    	t4BoyName.setFont(new Font(20));
    	t4BoyName.setTextFill(Color.web("blue"));
    	t4BoyName.setVisible(false);
    	t4GirlName.setFont(new Font(20));
    	t4GirlName.setTextFill(Color.web("red"));
    	t4GirlName.setVisible(false);
    }


    @FXML
    private TabPane tabPane;

    /**
     * Enlarge the size of the console, for when switch back to task zero
     */
    @FXML
    public void enlargeConsole() {
        tabPane.setPrefHeight(350);
    }

    /**
     * Reduce the size of the console to save space, for more space in tasks other than task zero
     */
    @FXML
    public void reduceConsole() {
        tabPane.setPrefHeight(600);
    }

    //task1
    @FXML
    private TextField t1YearOfInterest;

    @FXML
    private TextField t1NumOfNames;

    @FXML
    private TextArea t1Summary;

    @FXML
    private Button t1GenerateButton;

    @FXML
    private Label t1MaleTableLabel;

    @FXML
    private Label t1FemaleTableLabel;

    @FXML
    private Label t1MaleBarChartLabel;

    @FXML
    private Label t1FemaleBarChartLabel;

    @FXML
    private Label t1MalePieChartLabel;

    @FXML
    private Label t1FemalePieChartLabel;

    @FXML
    private TableView<T1Record> t1MaleTable;

    @FXML
    private TableView<T1Record> t1FemaleTable;

    @FXML
    private TableColumn<T1Record, String> t1MaleNameCol;

    @FXML
    private TableColumn<T1Record, String> t1MaleOccurrCol;

    @FXML
    private TableColumn<T1Record, String> t1MalePercentCol;

    @FXML
    private TableColumn<T1Record, String> t1FemaleNameCol;

    @FXML
    private TableColumn<T1Record, String> t1FemaleOccurrCol;

    @FXML
    private TableColumn<T1Record, String> t1FemalePercentCol;

    @FXML
    private BarChart<String, Number> t1MaleBarChart;

    @FXML
    private CategoryAxis t1MaleBarChartXAxis;

    @FXML
    private NumberAxis t1MaleBarChartYAxis;

    @FXML
    private BarChart<String, Number> t1FemaleBarChart;

    @FXML
    private CategoryAxis t1FemaleBarChartXAxis;

    @FXML
    private NumberAxis t1FemaleBarChartYAxis;

    @FXML
    private PieChart t1MalePieChart;

    @FXML
    private PieChart t1FemalePieChart;

    @FXML
    private Label t1ErrorMsgForYear;

    @FXML
    private Label t1ErrorMsgForN;

    /**
     * To generate the whole report in task 1
     * Toggled by clicking the Generate Report button in task 1
     */
    @FXML
    public void t1GenerateReport() {
    	t1ErrorMsgForN.setVisible(false);
    	t1ErrorMsgForYear.setVisible(false);
    	unhighlightTextField(t1YearOfInterest);
    	unhighlightTextField(t1NumOfNames);
    	if(t1InputIsValid()) {
	    	t1Summary();
	    	t1SetLabelText();
	    	t1SetTable();
	    	t1SetBarChart();
	    	t1SetPieChart();
	    	
    	}
    }

    private boolean t1InputIsValid() {
    	boolean valid = true;
    	/*if(t1NumOfNames.getText().isEmpty()) {
    		t1ErrorMsgForN.setText("Please input the number of most popular names.");
    		t1ErrorMsgForN.setVisible(true);
    		valid = false;
    	}
    	if(t1YearOfInterest.getText().isEmpty()) {
    		t1ErrorMsgForYear.setText("Please input the year of interest.");
    		t1ErrorMsgForYear.setVisible(true);
    		valid = false;
    	}*/
    	try {
    		Integer.parseInt(t1NumOfNames.getText());
    		
    		if(Integer.parseInt(t1NumOfNames.getText())<1 || Integer.parseInt(t1NumOfNames.getText())>10) {
	    		t1ErrorMsgForN.setText("Number should between 1 and 10");
	    		t1ErrorMsgForN.setVisible(true);
	    		highlightTextField(t1NumOfNames);
	    		valid = false;
	    	}
    	}
    	catch(NumberFormatException e) {
    		t1ErrorMsgForN.setText("Please input an integer.");
    		t1ErrorMsgForN.setVisible(true);
    		highlightTextField(t1NumOfNames);
    		valid = false;
    	}
    	try {
    		Integer.parseInt(t1YearOfInterest.getText());
    		
    		if(Integer.parseInt(t1YearOfInterest.getText())<1880 || Integer.parseInt(t1YearOfInterest.getText())>2019) {
	    		t1ErrorMsgForYear.setText("Year should between 1880 and 2019");
	    		t1ErrorMsgForYear.setVisible(true);
	    		highlightTextField(t1YearOfInterest);
	    		valid = false;
	    	}
    	}
    	catch(NumberFormatException e) {
    		t1ErrorMsgForYear.setText("Please input an integer.");
    		t1ErrorMsgForYear.setVisible(true);
    		highlightTextField(t1YearOfInterest);
    		valid = false;
    	}

    	return valid;
    }

    private void t1Summary() {
    	int year = Integer.parseInt(t1YearOfInterest.getText());
        String oReport = T1DataGenerator.getSummary(year);
        t1Summary.setText(oReport);
    }


    private void t1SetLabelText() {
    	int numNames = Integer.parseInt(t1NumOfNames.getText());
    	int year = Integer.parseInt(t1YearOfInterest.getText());
    	t1MaleTableLabel.setText("Top "+numNames+" Names (male) in "+year);
    	t1FemaleTableLabel.setText("Top "+numNames+" Names (female) in "+year);
    	t1MaleBarChartLabel.setText("Top "+numNames+" Names (male) in "+year);
    	t1FemaleBarChartLabel.setText("Top "+numNames+" Names (female) in "+year);
    	t1MalePieChartLabel.setText("Top "+numNames+" Names (male) in "+year);
    	t1FemalePieChartLabel.setText("Top "+numNames+" Names (female) in "+year);

    }

    private void t1SetTable() {
    	int numNames = Integer.parseInt(t1NumOfNames.getText());
    	int year = Integer.parseInt(t1YearOfInterest.getText());

    	ObservableList<T1Record> maleData = T1DataGenerator.getTableData(numNames,year, "M");
    	t1MaleNameCol.setCellValueFactory(new PropertyValueFactory<T1Record, String>("name"));
    	t1MaleOccurrCol.setCellValueFactory(new PropertyValueFactory<T1Record, String>("occurr"));
    	t1MalePercentCol.setCellValueFactory(new PropertyValueFactory<T1Record, String>("percent"));
    	t1MaleTable.setItems(maleData);

    	ObservableList<T1Record> femaleData = T1DataGenerator.getTableData(numNames,year, "F");
    	t1FemaleNameCol.setCellValueFactory(new PropertyValueFactory<T1Record, String>("name"));
    	t1FemaleOccurrCol.setCellValueFactory(new PropertyValueFactory<T1Record, String>("occurr"));
    	t1FemalePercentCol.setCellValueFactory(new PropertyValueFactory<T1Record, String>("percent"));
    	t1FemaleTable.setItems(femaleData);
    }

    private void t1SetBarChart() {
    	int numNames = Integer.parseInt(t1NumOfNames.getText());
    	int year = Integer.parseInt(t1YearOfInterest.getText());

    	t1MaleBarChartXAxis.setLabel("Name");
    	t1FemaleBarChartXAxis.setLabel("Name");
    	t1MaleBarChartYAxis.setLabel("Occurrence");
    	t1FemaleBarChartYAxis.setLabel("Occurrence");

    	XYChart.Series<String, Number> maleSeries = new XYChart.Series<String, Number>();
    	XYChart.Series<String, Number> femaleSeries = new XYChart.Series<String, Number>();

    	maleSeries.setName(String.valueOf(year));
    	femaleSeries.setName(String.valueOf(year));
    	for(int i=1;i<=numNames;++i) {
    		String name = AnalyzeNames.getName(year, i, "M");
    		int occurr = AnalyzeNames.getOccurrence(year, name, "M");
    		maleSeries.getData().add(new XYChart.Data<String, Number>(name, occurr));
    	}
    	for(int i=1;i<=numNames;++i) {
    		String name = AnalyzeNames.getName(year, i, "F");
    		int occurr = AnalyzeNames.getOccurrence(year, name, "F");
    		femaleSeries.getData().add(new XYChart.Data<String, Number>(name, occurr));
    	}

    	t1MaleBarChart.setAnimated(false);
    	t1FemaleBarChart.setAnimated(false);
    	t1MaleBarChart.getData().setAll(maleSeries);
    	t1FemaleBarChart.getData().setAll(femaleSeries);
    	t1MaleBarChart.setLegendVisible(false);
    	t1FemaleBarChart.setLegendVisible(false);
    }

    private void t1SetPieChart() {
    	int numNames = Integer.parseInt(t1NumOfNames.getText());
    	int year = Integer.parseInt(t1YearOfInterest.getText());

    	ObservableList<PieChart.Data> maleData = FXCollections.observableArrayList();
    	for(int i=1;i<=numNames;++i) {
    		String name = AnalyzeNames.getName(year, i, "M");
    		int occurr = AnalyzeNames.getOccurrence(year, name, "M");
    		maleData.add(new PieChart.Data(name, occurr));
    	}

    	ObservableList<PieChart.Data> femaleData = FXCollections.observableArrayList();
    	for(int i=1;i<=numNames;++i) {
    		String name = AnalyzeNames.getName(year, i, "F");
    		int occurr = AnalyzeNames.getOccurrence(year, name, "F");
    		femaleData.add(new PieChart.Data(name, occurr));
    	}

    	t1MalePieChart.setData(maleData);
    	t1FemalePieChart.setData(femaleData);

    }
    
    // task 2
    @FXML
    private TextField t2_start_year;

    @FXML
    private TextField t2_end_year;

    @FXML
    private TextField t2_k;

    @FXML
    private ChoiceBox<Character> t2_gender;

    @FXML
    private Button t2_generate;

    @FXML
    private TextArea t2_summary;
    
    @FXML
    private BarChart<String, Number> t2_bar;

    @FXML
    private PieChart t2_pie;
    
    @FXML
    private TableView<T2Record> t2_table;
    
    @FXML
    private TableColumn<T2Record, String> t2_name_column;

    @FXML
    private TableColumn<T2Record, String> t2_freq_column;

    @FXML
    private TableColumn<T2Record, String> t2_occurr_column;

    @FXML
    private TableColumn<T2Record, String> t2_percent_column;
    
    /**
     * The function that is called when Task 2 tab is clicked
     * Setup the console, gender choice box, and event handlers for fields
     */
    @FXML
    public void loadT2() {
    	reduceConsole();
        ObservableList<Character> genderList = FXCollections.observableArrayList('M', 'F');
        t2_gender.setItems(genderList);
        addClickToResetStyleEventHandlerToTextField(t2_start_year);
        addClickToResetStyleEventHandlerToTextField(t2_end_year);
        addClickToResetStyleEventHandlerToTextField(t2_k);
        addClickToResetStyleEventHandlerToCharBox(t2_gender);
    }

    /**
     * Generates the report in task 2
     * @return If the generation was successful or not
     */
    @FXML
    public boolean t2GenerateReport() {
    	unhighlightTextField(t2_start_year);
        unhighlightTextField(t2_end_year);
        unhighlightTextField(t2_k);
        unhighlightCharBox(t2_gender);
        
        boolean inputIsInvalid = false;
        // Validate empty input
        if (DataValidator.textFieldEmpty(t2_start_year)) {
            highlightTextField(t2_start_year);
            inputIsInvalid = true;
        }
        if (DataValidator.textFieldEmpty(t2_end_year)) {
            highlightTextField(t2_end_year);
            inputIsInvalid = true;
        }
        if (DataValidator.textFieldEmpty(t2_k)) {
            highlightTextField(t2_k);
            inputIsInvalid = true;
        }
        if (DataValidator.charBoxEmpty(t2_gender)) {
            highlightCharBox(t2_gender);
            inputIsInvalid = true;
        }
        // Validate data type, they return 0 on invalid input, so the following tests would not be affected
        int startYear = textFieldToInt(t2_start_year);
        int endYear = textFieldToInt(t2_end_year);
        int k = textFieldToInt(t2_k);
        // Validate out of range year
        if (DataValidator.yearOutOfRange(startYear)) {
            highlightTextField(t2_start_year);
            inputIsInvalid = true;
        }
        if (DataValidator.yearOutOfRange(endYear)) {
            highlightTextField(t2_end_year);
            inputIsInvalid = true;
        }
        // Validate year range
        if (DataValidator.invalidYearRange(startYear, endYear)) {
            highlightTextField(t2_start_year);
            highlightTextField(t2_end_year);
            inputIsInvalid = true;
        }
        
        if (DataValidator.kOutOfRange(k)) {
        	highlightTextField(t2_k);
        	inputIsInvalid = true;
        }
        
        // All validation complete, return if some case didn't pass
        if (inputIsInvalid) return false;
        
        T2DataGenerator t2 = new T2DataGenerator(startYear,endYear,k,t2_gender.getValue());
        
        setT2DataTable(t2.getOLD());
        setT2BarChart(t2.generateBarChartSeries());
        setT2PieChart(t2);
        
        t2_summary.setText(t2.getSummary());
        return true;
    }
    
    /**
     * Displays the bar chart in task 2
     * @param barChartSeries The data for the bar chart
     */
    public void setT2BarChart(XYChart.Series<String, Number> barChartSeries) {
        t2_bar.setAnimated(false);
        t2_bar.getData().setAll(barChartSeries);
    }
    
    /**
     * Displays the table in task 2
     * @param data The data for the table
     */
    public void setT2DataTable(ObservableList<T2Record> data) {
    	t2_name_column.setCellValueFactory(
                new PropertyValueFactory<T2Record, String>("name")
        );
    	t2_freq_column.setCellValueFactory(
                new PropertyValueFactory<T2Record, String>("freq")
        );
    	t2_occurr_column.setCellValueFactory(
                new PropertyValueFactory<T2Record, String>("occurr")
        );
    	t2_percent_column.setCellValueFactory(
                new PropertyValueFactory<T2Record, String>("percent")
        );
        t2_table.setItems(data);
    }
    
    /**
     * Displays the pie chart in task 2
     * @param t2 The generated report class
     */
    public void setT2PieChart(T2DataGenerator t2) {
    	ObservableList<PieChart.Data> data = FXCollections.observableArrayList();
    	for(T2Record record : t2.getOLD()) {
    		data.add(new PieChart.Data(record.getName(), Integer.parseInt(record.getOccurr())));
    	}
    	t2_pie.setAnimated(false);
    	t2_pie.setData(data);
    }
    
    
    // The FXML elements
    @FXML
    private Button t3GenerateButton;

    @FXML
    private TextField t3StartYearField;

    @FXML
    private TextField t3EndYearField;

    @FXML
    private TextField t3NameField;

    @FXML
    private ChoiceBox<String> t3GenderChoice;

    @FXML
    private TextArea t3SummaryTextArea;

    @FXML
    private TableView<T3YearRecord> t3DataTable;

    @FXML
    private TableColumn<T3YearRecord, String> t3YearColumn;

    @FXML
    private TableColumn<T3YearRecord, String> t3RankColumn;

    @FXML
    private TableColumn<T3YearRecord, String> t3OccurrencesColumn;

    @FXML
    private TableColumn<T3YearRecord, String> t3PercentageColumn;

    @FXML
    private BarChart<String, Number> t3BarChart;

    @FXML
    private LineChart<Number, Number> t3LineChart;

    @FXML
    private NumberAxis t3LineChartXAxis;

    /**
     * The function that is called when Task 3 tab is clicked
     * Setup the console, gender choice box, and event handlers for fields
     */
    @FXML
    public void loadT3() {
        reduceConsole();
        ObservableList<String> genderList = FXCollections.observableArrayList("Male", "Female");
        t3GenderChoice.setItems(genderList);
        addClickToResetStyleEventHandlerToTextField(t3StartYearField);
        addClickToResetStyleEventHandlerToTextField(t3EndYearField);
        addClickToResetStyleEventHandlerToTextField(t3NameField);
        addClickToResetStyleEventHandlerToChoiceBox(t3GenderChoice);
    }

    /**
     * The function called when generate report button is clicked
     * Perform data validation
     * If data is valid, outputs the result
     */
    @FXML
    public void t3GenerateReport() {
        // Unhighlight them all at first
        unhighlightTextField(t3StartYearField);
        unhighlightTextField(t3EndYearField);
        unhighlightTextField(t3NameField);
        unhighlightChoiceBox(t3GenderChoice);

        boolean inputIsInvalid = false;
        // Validate empty input
        if (DataValidator.textFieldEmpty(t3StartYearField)) {
            highlightTextField(t3StartYearField);
            inputIsInvalid = true;
        }
        if (DataValidator.textFieldEmpty(t3EndYearField)) {
            highlightTextField(t3EndYearField);
            inputIsInvalid = true;
        }
        if (DataValidator.textFieldEmpty(t3NameField)) {
            highlightTextField(t3NameField);
            inputIsInvalid = true;
        }
        if (DataValidator.choiceBoxEmpty(t3GenderChoice)) {
            highlightChoiceBox(t3GenderChoice);
            inputIsInvalid = true;
        }
        // Validate data type, they return 0 on invalid input, so the following tests would not be affected
        int startYear = textFieldToInt(t3StartYearField);
        int endYear = textFieldToInt(t3EndYearField);
        // Validate out of range year
        if (DataValidator.yearOutOfRange(startYear)) {
            highlightTextField(t3StartYearField);
            inputIsInvalid = true;
        }
        if (DataValidator.yearOutOfRange(endYear)) {
            highlightTextField(t3EndYearField);
            inputIsInvalid = true;
        }
        // Validate year range
        if (DataValidator.invalidYearRange(startYear, endYear)) {
            highlightTextField(t3StartYearField);
            highlightTextField(t3EndYearField);
            inputIsInvalid = true;
        }
        // All validation complete, return if some case didn't pass
        if (inputIsInvalid) return;

        // Input must be valid
        // Generate result
        String nameInput = t3NameField.getText();
        String name = nameInput;
        boolean isMale = t3GenderChoice.getValue().equals("Male");
        T3DataGenerator dataGenerator = new T3DataGenerator(startYear, endYear, name, isMale);
        String summaryText = dataGenerator.generateSummary();
        t3SummaryTextArea.setText(summaryText);

        // Generate Table
        final ObservableList<T3YearRecord> data = dataGenerator.generateDataTableData();
        setT3DataTable(data);

        // Generate Bar Chart
        final XYChart.Series<String, Number> barChartSeries = dataGenerator.generateBarChartSeries();
        setT3BarChart(barChartSeries);

        // Generate Line Chart
        final XYChart.Series<Number, Number> lineChartSeries = dataGenerator.generateLineChartSeries();
        setT3LineChart(lineChartSeries, dataGenerator.startYear, dataGenerator.endYear);
    }


    /**
     * A class to convert number into string where there will not be commas every thousand
     * Used in line chart X axis
     */
    public static class T3LabelFormatter extends StringConverter<Number> {
        @Override
        public String toString(Number object) {
            return Integer.toString(object.intValue());
        }

        @Override
        public Number fromString(String string) {
            return Integer.valueOf(string);
        }
    }


    /**
     * @param lineChartSeries The line chart series
     * @param startYear       The starting year
     * @param endYear         The ending year
     */
    public void setT3LineChart(XYChart.Series<Number, Number> lineChartSeries, int startYear, int endYear) {
        t3LineChart.setAnimated(false);  // We don't want it to be animated because it causes unwanted behavior
        // Save some space by manually setting the bounds
        int lowerBound = startYear - 2;
        int upperBound = endYear + 2;
        t3LineChartXAxis.setAutoRanging(false);
        t3LineChartXAxis.setLowerBound(lowerBound);
        t3LineChartXAxis.setUpperBound(upperBound);
        t3LineChartXAxis.setTickUnit((upperBound - lowerBound) / 10);
        t3LineChartXAxis.setTickLabelFormatter(new T3LabelFormatter());
        t3LineChart.getData().setAll(lineChartSeries);
    }


    /**
     * To set up the bar chart for Task Three
     *
     * @param barChartSeries The bar chart series
     */
    public void setT3BarChart(XYChart.Series<String, Number> barChartSeries) {
        t3BarChart.setAnimated(false);  // We don't want it to be animated because it causes unwanted behavior
        t3BarChart.getData().setAll(barChartSeries);

    }

    /**
     * To set up the data table for Task Three
     *
     * @param data The data for data table
     */
    public void setT3DataTable(ObservableList<T3YearRecord> data) {
        t3YearColumn.setCellValueFactory(
                new PropertyValueFactory<T3YearRecord, String>("year")
        );
        t3RankColumn.setCellValueFactory(
                new PropertyValueFactory<T3YearRecord, String>("rank")
        );
        t3OccurrencesColumn.setCellValueFactory(
                new PropertyValueFactory<T3YearRecord, String>("occurrences")
        );
        t3PercentageColumn.setCellValueFactory(
                new PropertyValueFactory<T3YearRecord, String>("percentage")
        );
        t3DataTable.setItems(data);
    }


    // Task 4
    @FXML
    private TextField t4DadName;
    
    @FXML
    private TextField t4MumName;
    
    @FXML
    private TextField t4DadYOB;
    
    @FXML
    private TextField t4MumYOB;
    
    @FXML
    private Label t4ErrorMsgForDadName;
    
    @FXML
    private Label t4ErrorMsgForMumName;
    
    @FXML
    private Label t4ErrorMsgForDadYOB;
    
    @FXML
    private Label t4ErrorMsgForMumYOB;
    
    @FXML
    private Label t4Algo1ExplainLabel;
    
    @FXML
    private Label t4Algo2ExplainLabel;
    
    @FXML
    private ChoiceBox<String> t4AlgoChoice;
    
    @FXML
    private Label t4ErrorMsgForAlgoChoice;
    
    @FXML
    private Label t4RecomBoyLabel;
    
    @FXML
    private Label t4RecomGirlLabel;
    
    @FXML
    private Label t4BoyName;
    
    @FXML
    private Label t4GirlName;
    
    @FXML
    private Label t4FunFactLabel;
    
    @FXML
    private Label t4FunFact;
    
    @FXML
    private TextArea t4ReasonTextArea;
    
    @FXML
    private TableView<T4Record> t4Table;
    
    @FXML
    private TableColumn<T4Record, String> t4YearCol;
    
    @FXML
    private TableColumn<T4Record, String> t4RankCol;
    
    @FXML
    private TableColumn<T4Record, String> t4NameCol;
    
    @FXML
    private TableColumn<T4Record, String> t4GenderCol;
    
    @FXML
    private TableColumn<T4Record, String> t4OccurrCol;
    
    @FXML
    private TableColumn<T4Record, String> t4PercentCol;
    
    
    /**
     * To generate the recommendation in task 4
     * Toggled by clicking the Generate Recommendation button in task 4
     */
    @FXML
    public void t4GenerateRecommendation() {
    	t4ErrorMsgForDadName.setVisible(false);
    	t4ErrorMsgForMumName.setVisible(false);
    	t4ErrorMsgForAlgoChoice.setVisible(false);
    	t4ErrorMsgForDadYOB.setTextFill(Color.web("black"));
    	t4ErrorMsgForMumYOB.setTextFill(Color.web("black"));
    	t4ErrorMsgForDadYOB.setText("(Range: 1880 - 2019)");
    	t4ErrorMsgForMumYOB.setText("(Range: 1880 - 2019)");
    	unhighlightTextField(t4DadName);
    	unhighlightTextField(t4MumName);
    	unhighlightTextField(t4DadYOB);
    	unhighlightTextField(t4MumYOB);
    	unhighlightChoiceBox(t4AlgoChoice);
    	
    	
    	t4BoyName.setVisible(false);
		t4GirlName.setVisible(false);
		t4FunFact.setText("?");
		
		t4ReasonTextArea.clear();
    	
    	if(t4InputIsValid()) {
    		String algo = t4AlgoChoice.getValue();
    		t4SetName(algo);
    		t4BoyName.setVisible(true);
    		t4GirlName.setVisible(true);
    		t4SetFunFact();
    		t4SetReason(algo);
    		t4SetTable(algo);
    	}
    }
    
    private boolean t4InputIsValid() {
    	boolean valid = true;
    	try {
    		int dadYOB = Integer.parseInt(t4DadYOB.getText());
    		
    		if(dadYOB<1880 || dadYOB>2019) {
        		t4ErrorMsgForDadYOB.setTextFill(Color.web("red"));
        		t4ErrorMsgForDadYOB.setText("Range: 1880 - 2019");
        		highlightTextField(t4DadYOB);
        		valid = false;
        	}
    		else {
    			if(t4DadName.getText().isEmpty()) {
        			t4ErrorMsgForDadName.setVisible(true);
            		t4ErrorMsgForDadName.setText("Please input dad's name");
            		highlightTextField(t4DadName);
            		valid = false;
            	}
            	else if(AnalyzeNames.getOccurrence(dadYOB, t4DadName.getText(), "M") == -1) {
            		t4ErrorMsgForDadName.setVisible(true);
            		t4ErrorMsgForDadName.setText("This name is not valid");
            		highlightTextField(t4DadName);
            		valid = false;
            	}
    		}
    	}
    	catch(NumberFormatException e) {
    		t4ErrorMsgForDadYOB.setTextFill(Color.web("red"));
    		t4ErrorMsgForDadYOB.setText("Please input an integer");
    		highlightTextField(t4DadYOB);
    		valid = false;
    	}
    	try {
    		int mumYOB = Integer.parseInt(t4MumYOB.getText());
    		
    		if(mumYOB<1880 || mumYOB>2019) {
    			t4ErrorMsgForMumYOB.setTextFill(Color.web("red"));
        		t4ErrorMsgForMumYOB.setText("Range: 1880 - 2019");
        		highlightTextField(t4MumYOB);
        		valid = false;
        	}
    		else {
    			if(t4MumName.getText().isEmpty()) {
        			t4ErrorMsgForMumName.setVisible(true);
            		t4ErrorMsgForMumName.setText("Please input mum's name");
            		highlightTextField(t4MumName);
            		valid = false;
            	}
            	else if(AnalyzeNames.getOccurrence(mumYOB, t4MumName.getText(), "F") == -1) {
            		t4ErrorMsgForMumName.setVisible(true);
            		t4ErrorMsgForMumName.setText("This name is not valid");
            		highlightTextField(t4MumName);
            		valid = false;
            	}
    		}
    	}
    	catch(NumberFormatException e) {
    		t4ErrorMsgForMumYOB.setTextFill(Color.web("red"));
    		t4ErrorMsgForMumYOB.setText("Please input an integer");
    		highlightTextField(t4MumYOB);
    		valid = false;
    	}
    	if(t4AlgoChoice.getValue()==null) {
    		t4ErrorMsgForAlgoChoice.setVisible(true);
    		highlightChoiceBox(t4AlgoChoice);
    		valid = false;
    	}
    		
    	
    	return valid;
    }
    
    private void t4SetName(String algo) {
    	String boyName = null;
    	String girlName = null;
    	int dadYOB = Integer.parseInt(t4DadYOB.getText());
    	int mumYOB = Integer.parseInt(t4MumYOB.getText());
    	String dadName = t4DadName.getText();
    	String mumName = t4MumName.getText();
    	
    	if(algo=="T4X1") {
    		boyName = AnalyzeNames.getName(dadYOB, 1, "M");
    		girlName = AnalyzeNames.getName(mumYOB, 1, "F");
    	}
    	else if(algo=="T4X2") {
    		int meanYear = (dadYOB+mumYOB)/2;
    		int dadRank = AnalyzeNames.getRank(dadYOB, dadName, "M");
    		int mumRank = AnalyzeNames.getRank(mumYOB, mumName, "F");
    		int meanRank = (dadRank+mumRank)/2;
    		boyName = AnalyzeNames.getName(meanYear, meanRank, "M");
    		girlName = AnalyzeNames.getName(meanYear, meanRank, "F");
    	}
    	t4BoyName.setText(boyName);
    	t4GirlName.setText(girlName);
    }
    
    private void t4SetFunFact() {
    	int dadYOB = Integer.parseInt(t4DadYOB.getText());
    	int mumYOB = Integer.parseInt(t4MumYOB.getText());
    	String dadName = t4DadName.getText();
    	String mumName = t4MumName.getText();
    	int dadRank = AnalyzeNames.getRank(dadYOB, dadName, "M");
		int mumRank = AnalyzeNames.getRank(mumYOB, mumName, "F");
    	if(dadRank<mumRank) {
    		t4FunFact.setText("Dad's name is more popular than Mum's in their years of birth!!");
    	}
    	else if(dadRank==mumRank) {
    		t4FunFact.setText("Dad's name and Mum's name have the same popularity!!");
    	}
    	else {
    		t4FunFact.setText("Mum's name is more popular than Dad's in their years of birth!!");
    	}
    }
    
    private void t4SetReason(String algo) {
    	String boyName = t4BoyName.getText();
    	String girlName = t4GirlName.getText();
    	String dadName = t4DadName.getText();
    	String mumName = t4MumName.getText();
    	int dadYOB = Integer.parseInt(t4DadYOB.getText());
    	int mumYOB = Integer.parseInt(t4MumYOB.getText());
    	int meanYear = (dadYOB+mumYOB)/2;
    	int dadRank = AnalyzeNames.getRank(dadYOB, dadName, "M");
		int mumRank = AnalyzeNames.getRank(mumYOB, mumName, "F");
		int meanRank = (dadRank+mumRank)/2;
    	
    	if(algo=="T4X1") {
    		String result = "Chosen algorithm: "+algo+"\n";
    		result += boyName+" is the most popular male name in "+dadYOB+" (the year of birth of Dad).\n";
    		
    		result += girlName+" is the most popular female name in "+mumYOB+" (the year of birth of Mum).\n";
    		
    		t4ReasonTextArea.setText(result);
    	}
    	else {
    		String result = "Chosen algorithm: "+algo+"\n";
    		result += "Rank of Dad's name in the year of birth of Dad: "+dadRank+"\n";
    		result += "Rank of Mum's name in the year of birth of Mum: "+mumRank+"\n";
    		result += boyName+" is of Rank "+meanRank+" (the mean Rank between Dad's and Mum's) in "+meanYear+" (the mean year between Dad's year of birth and Mum's year of birth).\n";
    		result += girlName+" is of Rank "+meanRank+" (the mean Rank between Dad's and Mum's) in "+meanYear+" (the mean year between Dad's year of birth and Mum's year of birth).\n";
    		result += "So the recommended names are really like half from Dad and half from Mum.\n";
    		
    		t4ReasonTextArea.setText(result);
    	}
    }
    
    private void t4SetTable(String algo) {
    	ObservableList<T4Record> data = FXCollections.observableArrayList();
    	String boyName = t4BoyName.getText();
    	String girlName = t4GirlName.getText();
    	int dadYOB = Integer.parseInt(t4DadYOB.getText());
    	int mumYOB = Integer.parseInt(t4MumYOB.getText());
    	int meanYear = (dadYOB+mumYOB)/2;
    	String dadName = t4DadName.getText();
    	String mumName = t4MumName.getText();
    	int dadRank = AnalyzeNames.getRank(dadYOB, dadName, "M");
		int mumRank = AnalyzeNames.getRank(mumYOB, mumName, "F");
		int meanRank = (dadRank+mumRank)/2;
		String dadOccurr = String.valueOf(AnalyzeNames.getOccurrence(dadYOB, dadName, "M"));
		String dadPercent = String.format("%.2f%%", Double.parseDouble(dadOccurr)/AnalyzeNames.getTotalOccurrence(dadYOB, "M")*100);
		String mumOccurr = String.valueOf(AnalyzeNames.getOccurrence(mumYOB, mumName, "F"));
		String mumPercent = String.format("%.2f%%", Double.parseDouble(mumOccurr)/AnalyzeNames.getTotalOccurrence(mumYOB, "F")*100);
		String boyOccurr = String.valueOf(AnalyzeNames.getOccurrence(meanYear, boyName, "M"));
		String boyPercent = String.format("%.2f%%", Double.parseDouble(boyOccurr)/AnalyzeNames.getTotalOccurrence(meanYear, "M")*100);
		String girlOccurr = String.valueOf(AnalyzeNames.getOccurrence(meanYear, girlName, "F"));
		String girlPercent = String.format("%.2f%%", Double.parseDouble(girlOccurr)/AnalyzeNames.getTotalOccurrence(meanYear, "F")*100);
    	if(algo=="T4X1") {
    		for(int i=1;i<=3;++i) {
    			String name = AnalyzeNames.getName(dadYOB, i, "M");
    			String occurr = String.valueOf(AnalyzeNames.getOccurrence(dadYOB, name, "M"));
    			String percent = String.format("%.2f%%", Double.parseDouble(occurr)/AnalyzeNames.getTotalOccurrence(dadYOB, "M")*100);
    			
    			data.add(new T4Record(String.valueOf(dadYOB), String.valueOf(i), name, "M", occurr, percent));
    		}
    		for(int i=1;i<=3;++i) {
    			String name = AnalyzeNames.getName(mumYOB, i, "F");
    			String occurr = String.valueOf(AnalyzeNames.getOccurrence(mumYOB, name, "F"));
    			String percent = String.format("%.2f%%", Double.parseDouble(occurr)/AnalyzeNames.getTotalOccurrence(mumYOB, "F")*100);
    			
    			data.add(new T4Record(String.valueOf(mumYOB), String.valueOf(i), name, "F", occurr, percent));
    		}
    	}
    	else {
    		data.add(new T4Record(String.valueOf(dadYOB), String.valueOf(dadRank), dadName, "M", dadOccurr, dadPercent));
    		data.add(new T4Record(String.valueOf(meanYear), String.valueOf(meanRank), boyName, "M", boyOccurr, boyPercent));
    		data.add(new T4Record(String.valueOf(meanYear), String.valueOf(meanRank), girlName, "M", girlOccurr, girlPercent));
    		data.add(new T4Record(String.valueOf(mumYOB), String.valueOf(mumRank), mumName, "F", mumOccurr, mumPercent));
    	}
    	t4YearCol.setCellValueFactory(new PropertyValueFactory<T4Record, String>("year"));
    	t4RankCol.setCellValueFactory(new PropertyValueFactory<T4Record, String>("rank"));
    	t4NameCol.setCellValueFactory(new PropertyValueFactory<T4Record, String>("name"));
    	t4GenderCol.setCellValueFactory(new PropertyValueFactory<T4Record, String>("gender"));
    	t4OccurrCol.setCellValueFactory(new PropertyValueFactory<T4Record, String>("occurr"));
    	t4PercentCol.setCellValueFactory(new PropertyValueFactory<T4Record, String>("percent"));
    	
    	t4Table.setItems(data);
    	
    }

    // Beginning of Task 5
    @FXML
    private TextField t5_iName;

    @FXML
    private TextField t5_iYOB;

    @FXML
    private ChoiceBox<String> t5_iGender;

    @FXML
    private ChoiceBox<String> t5_iGenderMate;

    @FXML
    private ChoiceBox<String> t5_iPreference;

    @FXML
    private ChoiceBox<String> t5_algorithm;

    @FXML
    private TextField t5_oName;

    @FXML
    private TextArea t5_reason;
    
    @FXML
    private BarChart<String, Number> t5_chart;
    
    @FXML
    private Button t5_predict_button;
    
    /**
     * The function that is called when Task 5 tab is clicked
     * Setup the console, choice boxes, and event handlers for fields
     */
    @FXML
    public void loadT5() {
    	reduceConsole();
        ObservableList<String> genderList = FXCollections.observableArrayList("M", "F");
        ObservableList<String> prefList = FXCollections.observableArrayList("younger","older");
        ObservableList<String> algList = FXCollections.observableArrayList("T5X1", "T5X2");
        t5_iGender.setItems(genderList);
        t5_iGenderMate.setItems(genderList);
        t5_iPreference.setItems(prefList);
        t5_algorithm.setItems(algList);
        addClickToResetStyleEventHandlerToTextField(t5_iName);
        addClickToResetStyleEventHandlerToTextField(t5_iYOB);
        addClickToResetStyleEventHandlerToChoiceBox(t5_iGender);
        addClickToResetStyleEventHandlerToChoiceBox(t5_iGenderMate);
        addClickToResetStyleEventHandlerToChoiceBox(t5_iPreference);
        addClickToResetStyleEventHandlerToChoiceBox(t5_algorithm);
    }
    
    /**
     * Run the inputed data through the selected algorithm and display the result and reason.
     * @return If the prediction was successful or not
     */
    @FXML
    public boolean t5_predict() {
    	boolean inputIsInvalid = false;
        if (DataValidator.textFieldEmpty(t5_iName)) {
            highlightTextField(t5_iName);
            t5_reason.setText("Please enter your name.\n");
            inputIsInvalid = true;
        }
        if (DataValidator.textFieldEmpty(t5_iYOB)) {
            highlightTextField(t5_iYOB);
            t5_reason.setText("Please enter your year of birth.\n");
            inputIsInvalid = true;
        }
        if (DataValidator.choiceBoxEmpty(t5_iGender)) {
            highlightChoiceBox(t5_iGender);
            t5_reason.setText("Please select your gender.\n");
            inputIsInvalid = true;
        }
        if (DataValidator.choiceBoxEmpty(t5_iGenderMate)) {
            highlightChoiceBox(t5_iGenderMate);
            t5_reason.setText("Please select your soulmate's gender.\n");
            inputIsInvalid = true;
        }
        if (DataValidator.choiceBoxEmpty(t5_iPreference)) {
            highlightChoiceBox(t5_iPreference);
            t5_reason.setText("Please select your age preference.\n");
            inputIsInvalid = true;
        }
        if (DataValidator.choiceBoxEmpty(t5_algorithm)) {
            highlightChoiceBox(t5_algorithm);
            t5_reason.setText("Please select an algorithm.\n");
            inputIsInvalid = true;
        }
        
        if (!DataValidator.textFieldEmpty(t5_iYOB)) {
        	int test = textFieldToInt(t5_iYOB);
        	if (test == 0) {
        		highlightTextField(t5_iYOB);
		    	t5_reason.setText("Please input a valid year.\n");
		        inputIsInvalid = true;
        	}
        	else if (Integer.parseInt(t5_iYOB.getText()) > 2019) {
		    	highlightTextField(t5_iYOB);
		    	t5_reason.setText("You are too young to be finding a soulmate.\n");
		        inputIsInvalid = true;
		    }
		    
        	else if (Integer.parseInt(t5_iYOB.getText()) < 1880) {
		    	highlightTextField(t5_iYOB);
		    	t5_reason.setText("You are too old to be finding a soulmate.\n");
		        inputIsInvalid = true;
		    }
        }
        
        if (inputIsInvalid) return false;
        
        T5NamePicker t5 = new T5NamePicker(t5_iName.getText(),t5_iGender.getValue(),
        		Integer.parseInt(t5_iYOB.getText()),t5_iGenderMate.getValue(),
        		t5_iPreference.getValue(),t5_algorithm.getValue()=="T5X2");

        t5_oName.setText(t5.getOName());
        t5_reason.setText(t5.getReason());
        
        XYChart.Series<String, Number> series = t5.generateChart();
        t5_chart.setAnimated(false);
        if (series != null)
        	t5_chart.getData().setAll(series);
        return true;
    }
    
    
    
    // End of Task 5
    
    // Task 6

    @FXML
    private TextField t6OwnNameField;

    @FXML private ChoiceBox<String> t6OwnGenderChoice;

    @FXML private TextField t6OwnYOB;

    @FXML private TextField t6TargetName;

    @FXML private ChoiceBox<String> t6TargetGenderChoice;

    @FXML private ChoiceBox<String> t6PreferenceChoice;

    @FXML private RadioButton t6X1Button;

    @FXML private RadioButton t6X2Button;

    @FXML private Button t6RunButton;

    @FXML private PieChart t6PieChart;

    @FXML private Label t6ProgressLabel;

    @FXML private TextArea t6TextArea;

    @FXML private ImageView t6HeartContainerImage;

    @FXML private TextField t6TargetBirthMonth;

    @FXML private TextField t6TargetBirthDay;

    @FXML private Label t6TargetBirthMonthLabel;

    @FXML private Label t6TargetBirthDayLabel;

    private final ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();
    private int t6Score = 0;
    private int t6Counter = 0;
    private int t6StepSize = 0;
    private ScheduledFuture future;

    /**
     * Set the percentage to the chart
     *
     * @param data
     * @param chart
     * @param label
     */
    public static void dataToChart(int data, PieChart chart, Label label) {
        chart.getData().get(0).setPieValue(data);
        chart.getData().get(1).setPieValue(100 - data);
        label.setText(data + "%");

    }

    /**
     * The function called when the task 6 tab is clicked
     */
    @FXML
    public void loadT6() {

        t6TextArea.setStyle("text-area-background: #FFE6EE;-fx-background-color: #FFE6EE;");


        reduceConsole();
        // Initial setups
        ObservableList<String> genderList = FXCollections.observableArrayList("Male", "Female");
        t6OwnGenderChoice.setItems(genderList);
        t6TargetGenderChoice.setItems(genderList);
        ObservableList<String> preferenceList = FXCollections.observableArrayList("Younger", "Maturer");
        t6PreferenceChoice.setItems(preferenceList);
        ToggleGroup algorithmGroup = new ToggleGroup();
        t6X1Button.setToggleGroup(algorithmGroup);
        t6X2Button.setToggleGroup(algorithmGroup);
        t6X1Button.fire();

        // Add event handlers
        addClickToResetStyleEventHandlerToTextField(t6OwnNameField);
        addClickToResetStyleEventHandlerToTextField(t6OwnYOB);
        addClickToResetStyleEventHandlerToTextField(t6TargetName);
        addClickToResetStyleEventHandlerToChoiceBox(t6OwnGenderChoice);
        addClickToResetStyleEventHandlerToChoiceBox(t6TargetGenderChoice);
        addClickToResetStyleEventHandlerToChoiceBox(t6PreferenceChoice);
        addClickToResetStyleEventHandlerToTextField(t6TargetBirthDay);
        addClickToResetStyleEventHandlerToTextField(t6TargetBirthMonth);

        t6HeartContainerImage.setVisible(false);
    }

    /**
     * Called when algorithm 1 is selected
     */
    @FXML
    public void selectT6X1() {
        t6TargetBirthMonth.setVisible(false);
        t6TargetBirthDay.setVisible(false);
        t6TargetBirthMonthLabel.setVisible(false);
        t6TargetBirthDayLabel.setVisible(false);
    }

    /**
     * Called when algorithm 2 is selected
     */
    @FXML
    public void selectT6X2() {
        t6TargetBirthMonth.setVisible(true);
        t6TargetBirthDay.setVisible(true);
        t6TargetBirthMonthLabel.setVisible(true);
        t6TargetBirthDayLabel.setVisible(true);
    }

    /**
     * Calculate the score for task 6
     */
    @FXML
    public void t6Calculate() {

        unhighlightTextField(t6OwnNameField);
        unhighlightTextField(t6OwnYOB);
        unhighlightTextField(t6TargetName);
        unhighlightChoiceBox(t6OwnGenderChoice);
        unhighlightChoiceBox(t6TargetGenderChoice);
        unhighlightChoiceBox(t6PreferenceChoice);

        // Data validation
        boolean inputIsInvalid = false;
        if (DataValidator.textFieldEmpty(t6OwnNameField)) {
            highlightTextField(t6OwnNameField);
            inputIsInvalid = true;
        }
        if (DataValidator.textFieldEmpty(t6OwnYOB)) {
            highlightTextField(t6OwnYOB);
            inputIsInvalid = true;
        }
        if (DataValidator.textFieldEmpty(t6TargetName)) {
            highlightTextField(t6TargetName);
            inputIsInvalid = true;
        }
        if (DataValidator.choiceBoxEmpty(t6OwnGenderChoice)) {
            highlightChoiceBox(t6OwnGenderChoice);
            inputIsInvalid = true;
        }
        if (DataValidator.choiceBoxEmpty(t6TargetGenderChoice)) {
            highlightChoiceBox(t6TargetGenderChoice);
            inputIsInvalid = true;
        }
        if (DataValidator.choiceBoxEmpty(t6PreferenceChoice)) {
            highlightChoiceBox(t6PreferenceChoice);
            inputIsInvalid = true;
        }

        int ownYOB = textFieldToInt(t6OwnYOB);
        int thisYear = Calendar.getInstance().get(Calendar.YEAR);
        if (ownYOB > thisYear) {
            // The year of birth is after this year
            t6TextArea.setText("Wow, you are looking for a match before even being born\n" +
                    "That is some serious dedication");
            return;
        }
        if (thisYear - ownYOB > 118) {
            // He is older than 118 years old
            t6TextArea.setText("Wow, you are " + (thisYear - ownYOB) + " years old\n" +
                    "The oldest man recorded is 118 years old, you should register for a Guinness World Record instead.");
            return;
        }

        // Before execute
        if (inputIsInvalid) return;

        // Collect remaining inputs
        String ownName = t6OwnNameField.getText().toUpperCase();  // Capitalize because all data is capitalized
        String targetName = t6TargetName.getText().toUpperCase();
        boolean isMale = t6OwnGenderChoice.getValue().equals("Male");
        boolean targetIsMale = t6TargetGenderChoice.getValue().equals("Male");
        boolean younger = t6PreferenceChoice.getValue().equals("Younger");
        boolean isT6X2 = t6X2Button.isSelected();


        if (isT6X2) {
            if (DataValidator.textFieldEmpty(t6TargetBirthMonth)) {
                highlightTextField(t6TargetBirthMonth);
                inputIsInvalid = true;
            }
            if (DataValidator.textFieldEmpty(t6TargetBirthDay)) {
                highlightTextField(t6TargetBirthDay);
                inputIsInvalid = true;
            }
            int targetBirthDay = textFieldToInt(t6TargetBirthDay);
            int targetBirthMonth = textFieldToInt(t6TargetBirthMonth);
            if (targetBirthMonth > 12 || targetBirthMonth < 1) {
                highlightTextField(t6TargetBirthMonth);
                inputIsInvalid = true;
            }
            if (targetBirthDay < 1 || targetBirthDay > 31) {
                highlightTextField(t6TargetBirthDay);
                inputIsInvalid = true;
            }
            if (inputIsInvalid) return;

            T6CompatibilityCalculator calculator = new T6CompatibilityCalculator(ownName, isMale, ownYOB, targetName, targetIsMale, younger, isT6X2, targetBirthMonth, targetBirthDay);
            t6PlotPieChart(calculator.getCompatibilityScore());
            t6SetText(calculator.getPrediction());
        } else {
            T6CompatibilityCalculator calculator = new T6CompatibilityCalculator(ownName, isMale, ownYOB, targetName, targetIsMale, younger, isT6X2);
            t6PlotPieChart(calculator.getCompatibilityScore());
            t6SetText(calculator.getPrediction());
        }

        return;
    }

    /**
     * Set text for the text area for task 6
     *
     * @param text
     */
    public void t6SetText(String text) {
        t6TextArea.setText(text);
    }

    /**
     * Plot the pie chart for task 6
     *
     * @param percentage
     */
    public void t6PlotPieChart(int percentage) {

        t6HeartContainerImage.setVisible(true);

        // Pie chart properties
        t6PieChart.setAnimated(false);
        t6PieChart.legendVisibleProperty().set(false);
        t6PieChart.labelsVisibleProperty().set(false);

        PieChart.Data slice1 = new PieChart.Data("Success", 0);
        PieChart.Data slice2 = new PieChart.Data("Fail", 100);
        ObservableList<PieChart.Data> pieChartSeries = FXCollections.observableArrayList(slice1, slice2);
        t6PieChart.getData().setAll(pieChartSeries);
        t6PieChart.getData().get(0).getNode().setStyle("-fx-pie-color: #ff4f4f");
        t6PieChart.getData().get(1).getNode().setStyle("-fx-pie-color: #a4fffa");


        Runnable dataGetter = () -> {
            try {
                Thread.sleep(1);
            } catch (InterruptedException ex) {
            }
            int data = getData();
            Platform.runLater(() -> {
                dataToChart(data, t6PieChart, t6ProgressLabel);
            });
        };

        int score = percentage;
        int animationSpeed = 40;

        t6Score = score;
        t6Counter = 0;
        t6StepSize = score / 10;

        for (int i = 0; i <= score * animationSpeed; i += animationSpeed) {

            future = service.schedule(dataGetter, i, TimeUnit.MILLISECONDS);
        }

    }

    /**
     * @return the percentage
     */
    public int getData() {
        if (t6Counter >= t6Score) return t6Score;
        t6Counter = t6Counter + t6StepSize;
        if (t6StepSize > 1) {
            t6StepSize--;
        }
        return t6Counter;
    }

    // MISC functions

    /**
     * @param field The text field
     * @return The integer representation of the test field, 0 if the input is invalid
     */
    public int textFieldToInt(TextField field) {
        try {
            return Integer.parseInt(field.getText());
        } catch (Exception e) {
            return 0;
        }
    }


    /**
     * To highlight a choice box to show the user the input in the choice box is invalid
     *
     * @param box the choice box
     */
    public void highlightChoiceBox(ChoiceBox<String> box) {
        box.setStyle("-fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, pink;" +
                "-fx-background-insets: 0 0 -1 0, 0, 1, 2;" +
                "-fx-background-radius: 3px, 3px, 2px, 1px;");
    }
    
    /**
     * To highlight a char box to show the user the input in the char box is invalid
     *
     * @param box the char box
     */
    public void highlightCharBox(ChoiceBox<Character> box) {
        box.setStyle("-fx-background-color: -fx-shadow-highlight-color, -fx-outer-border, -fx-inner-border, pink;" +
                "-fx-background-insets: 0 0 -1 0, 0, 1, 2;" +
                "-fx-background-radius: 3px, 3px, 2px, 1px;");
    }

    /**
     * To highlight a text field to show the user the input in the text field is invalid
     *
     * @param field The text field
     */
    public void highlightTextField(TextField field) {
        field.setStyle("-fx-text-box-border: #B22222; -fx-focus-color: #B22222;");
    }

    /**
     * To add a event handler to the text field, so that when the text field is clicked, the formatting will disappear
     * So that the highlighting will disappear after the user retries input
     *
     * @param field The text field
     */
    // Event handling for textFields
    public void addClickToResetStyleEventHandlerToTextField(TextField field) {
        field.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                unhighlightTextField(field);
            }
        });
    }


    /**
     * To add a event handler to the choice box, so that when the choice box is clicked, the formatting will disappear
     * So that the highlighting will disappear after the user retries input
     *
     * @param box The choice box
     */
    public void addClickToResetStyleEventHandlerToChoiceBox(ChoiceBox<String> box) {
        box.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                unhighlightChoiceBox(box);
            }
        });
    }
    
    /**
     * To add a event handler to the char box, so that when the char box is clicked, the formatting will disappear
     * So that the highlighting will disappear after the user retries input
     *
     * @param box The char box
     */
    public void addClickToResetStyleEventHandlerToCharBox(ChoiceBox<Character> box) {
        box.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                unhighlightCharBox(box);
            }
        });
    }
    
    /**
     * Unhighlight a char box
     *
     * @param box The char box
     */
    public void unhighlightCharBox(ChoiceBox<Character> box) {
        box.setStyle("");
    }

    /**
     * Unhighlight a text field
     *
     * @param field The text field
     */
    public void unhighlightTextField(TextField field) {
        field.setStyle("");
    }

    /**
     * Unhighlight a choice box
     *
     * @param box The choice box
     */
    public void unhighlightChoiceBox(ChoiceBox<String> box) {
        box.setStyle("");
    }

}

